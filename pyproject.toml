[project]
name = "asynctor"
description = "Async functions to compare with anyio and asyncio, and toolkit to read excel with async/await."
authors = [{ name = "Waket Zheng", email = "waketzheng@gmail.com" }]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.9"
dynamic = [ "version" ]
dependencies = [
    "anyio>=3.7.1",
    "eval-type-backport (>=0.2.2,<1.0.0); python_version < '3.10'",
]
# requires by anyio:
#    "exceptiongroup >= 1.0.2; python_version < '3.11'",
#    "typing_extensions >= 4.1; python_version < '3.11'",

[project.optional-dependencies]
redis = ["redis>=5.0.0"]
xls = ["pandas>=2.2.0", "openpyxl>=3.1.0"]
fastapi = ["redis", "fastapi>=0.115.0", "httpx>=0.28.1", "asgi-lifespan>=2.1.0"]

[project.urls]
homepage = "https://github.com/waketzheng/asynctor"
repository = "https://github.com/waketzheng/asynctor.git"
"Bug Tracker" = "https://github.com/waketzheng/asynctor/issues"

[tool.pdm]
version = {source="file", path="asynctor/__init__.py"}

[dependency-groups]
dev = [
    "fast-dev-cli>=0.15.1",
    "types-redis>=4.6.0.20241004",
    "pandas-stubs>=2.2.0",
    "bandit>=1.8.3",
    "pytest-mock>=3.14.1",
    "fastapi-cdn-host>=0.9.1",
    "uvicorn>=0.34.3",
]
ci = ["coveralls @ git+https://github.com/waketzheng/coveralls-python@4.1.1"]

[tool.ruff]
line-length = 100

[tool.ruff.lint]
extend-select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "I",      # https://docs.astral.sh/ruff/rules/#isort-i
    "SIM",    # https://docs.astral.sh/ruff/rules/#flake8-simplify-sim
    "FA",     # https://docs.astral.sh/ruff/rules/#flake8-future-annotations-fa
    "UP",     # https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "RUF100", # https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
]

[tool.ruff.lint.per-file-ignores]
"test_*.py" = ["E501"]
"scripts/test.py" = ["E501"]
"scripts/*.py" = ["UP009","UP032"]

[tool.mypy]
pretty = true
python_version = "3.9"
ignore_missing_imports = true
check_untyped_defs = true

[tool.coverage.run]
omit = [
    # omit anything in a .cache directory anywhere
    "*/.cache/*",
    # omit everything in /usr
    "/usr/*",
    # omit this single file
    "examples/fastapi/conftest.py",
]
[tool.coverage.report]
omit = ["*/tests/*", "test_*"]
exclude_lines = [
    "pragma: no cover",
    "@overload",
    'if __name__ == "__main__":',
    "if TYPE_CHECKING:",
]

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"
